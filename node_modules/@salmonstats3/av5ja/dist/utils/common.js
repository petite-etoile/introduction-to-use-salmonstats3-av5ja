var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Exclude, Expose, Transform, Type } from 'class-transformer';
import dayjs from 'dayjs';
import 'reflect-metadata';
export var Common;
(function (Common) {
    class TextColor {
        a;
        b;
        g;
        r;
    }
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], TextColor.prototype, "a", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], TextColor.prototype, "b", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], TextColor.prototype, "g", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], TextColor.prototype, "r", void 0);
    Common.TextColor = TextColor;
    class PlayerId {
        id;
        prefix;
        npln_user_id;
        start_time;
        uuid;
        suffix;
        host_npln_user_id;
        /**
         * オリジナルのリザルトID
         */
        get raw_value() {
            // 逆変換時にはJSTからUTCに変換する
            return btoa(`${this.id}-${this.prefix}-${this.host_npln_user_id}:${dayjs(this.start_time).subtract(9, 'hour').format('YYYYMMDDTHHmmss')}_${this.uuid}:${this.suffix}-${this.npln_user_id}`);
        }
        get is_myself() {
            return this.npln_user_id === this.host_npln_user_id;
        }
        constructor(raw_value) {
            const regexp = /([\w]*)-([\w]{1})-([\w\d]{20}):([\dT]{15})_([a-f0-9-]{36}):([\w]{1})-([\w\d]{20})/;
            const match = regexp.exec(atob(raw_value));
            if (match !== null) {
                const [, id, prefix, host_npln_user_id, start_time, uuid, suffix, npln_user_id] = match;
                this.id = id;
                this.prefix = prefix;
                this.npln_user_id = npln_user_id;
                // JSTのサーバーの時間なので+09:00する
                this.start_time = dayjs(start_time).add(9, 'hour').toDate();
                this.uuid = uuid;
                this.suffix = suffix;
                this.host_npln_user_id = host_npln_user_id;
            }
        }
    }
    Common.PlayerId = PlayerId;
    class CoopHistoryDetailId {
        id;
        prefix;
        npln_user_id;
        play_time;
        uuid;
        /**
         * オリジナルのリザルトID
         */
        get raw_value() {
            // 逆変換時にはJSTからUTCに変換する
            return btoa(`${this.id}-${this.prefix}-${this.npln_user_id}:${dayjs(this.play_time).subtract(9, 'hour').format('YYYYMMDDTHHmmss')}_${this.uuid}`);
        }
        constructor(raw_value) {
            const regexp = /([\w]*)-([\w]{1})-([\w\d]{20}):([\dT]{15})_([a-f0-9-]{36})/;
            const match = regexp.exec(atob(raw_value));
            if (match !== null) {
                const [, id, prefix, npln_user_id, start_time, uuid] = match;
                this.id = id;
                this.prefix = prefix;
                this.npln_user_id = npln_user_id;
                // JSTのサーバーの時間なので+09:00する
                this.play_time = dayjs(start_time).add(9, 'hour').toDate();
                this.uuid = uuid;
            }
            else {
                throw new Error('Invalid CoopHistoryDetailId');
            }
        }
    }
    Common.CoopHistoryDetailId = CoopHistoryDetailId;
    /**
     * Node
     */
    class Node {
        nodes;
        T;
        constructor(T) {
            this.T = T;
        }
    }
    __decorate([
        Expose(),
        Type((options) => (options?.newObject).T),
        __metadata("design:type", Array)
    ], Node.prototype, "nodes", void 0);
    __decorate([
        Exclude(),
        __metadata("design:type", Function)
    ], Node.prototype, "T", void 0);
    Common.Node = Node;
    /**
     * Hash
     */
    class Hash {
        hash;
    }
    __decorate([
        Expose({ name: 'image' }),
        Transform(({ obj }) => {
            const regexp = /([a-f0-9]{64})/;
            const match = regexp.exec(obj.image.url);
            return match === null ? obj.image.url : match[0];
        }),
        __metadata("design:type", String)
    ], Hash.prototype, "hash", void 0);
    Common.Hash = Hash;
    /**
     * Hash
     */
    class Id {
        id;
    }
    __decorate([
        Expose(),
        Transform(({ value }) => parseInt(atob(value).split('-')[1], 10)),
        __metadata("design:type", Number)
    ], Id.prototype, "id", void 0);
    Common.Id = Id;
    /**
     * Hash and Id
     */
    class HashId {
        hash;
        id;
    }
    __decorate([
        Expose({ name: 'image' }),
        Transform(({ obj }) => {
            const regexp = /([a-f0-9]{64})/;
            const match = regexp.exec(obj.image.url);
            return match === null ? obj.image.url : match[0];
        }),
        __metadata("design:type", String)
    ], HashId.prototype, "hash", void 0);
    __decorate([
        Expose(),
        Transform(({ value }) => {
            const raw_value = atob(value);
            const regexp = /[\w]*-([\d-]*)/;
            const match = regexp.exec(raw_value);
            return match === null ? null : parseInt(match[1]);
        }),
        __metadata("design:type", Number)
    ], HashId.prototype, "id", void 0);
    Common.HashId = HashId;
})(Common || (Common = {}));
//# sourceMappingURL=common.js.map