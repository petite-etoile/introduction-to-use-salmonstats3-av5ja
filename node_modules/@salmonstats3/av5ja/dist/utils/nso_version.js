var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Expose, Type, plainToInstance } from 'class-transformer';
import { Method } from '../enum/method';
import 'reflect-metadata';
export var NSO;
(function (NSO) {
    let Version;
    (function (Version) {
        class Request {
            baseURL = 'https://itunes.apple.com/';
            headers;
            method = Method.GET;
            parameters = {
                id: '1234806557',
            };
            path = 'lookup';
            constructor() { }
            request(response) {
                return plainToInstance(Response, response);
            }
        }
        Version.Request = Request;
        class Result {
            minimum_os_version;
            file_size_bytes;
            release_date;
            current_version_release_date;
            version;
        }
        class Response {
            results;
            revision;
            get result() {
                return this.results[0];
            }
        }
        __decorate([
            Expose(),
            Type(() => Result),
            __metadata("design:type", Array)
        ], Response.prototype, "results", void 0);
        __decorate([
            Expose(),
            __metadata("design:type", String)
        ], Response.prototype, "revision", void 0);
        Version.Response = Response;
    })(Version = NSO.Version || (NSO.Version = {}));
})(NSO || (NSO = {}));
//# sourceMappingURL=nso_version.js.map