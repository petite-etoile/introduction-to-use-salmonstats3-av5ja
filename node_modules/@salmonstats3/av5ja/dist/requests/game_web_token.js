var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Transform, Type, plainToInstance } from 'class-transformer';
import { JWT } from '../dto/jwt.dto';
import { Method } from '../enum/method';
import 'reflect-metadata';
export var GameWebToken;
(function (GameWebToken) {
    class Request {
        baseURL = 'https://api-lp1.znc.srv.nintendo.net/';
        headers;
        method = Method.POST;
        parameters;
        path = 'v2/Game/GetWebServiceToken';
        constructor(token, hash, version) {
            this.headers = {
                'Accept-Encoding': 'gzip',
                Authorization: `Bearer ${token.raw_value}`,
                'Content-Type': 'application/json; charset=utf-8',
                'User-Agent': `com.nintendo.znca/${version}(Android/7.1.2)`,
                'X-Platform': 'Android',
                'X-ProductVersion': version,
            };
            this.parameters = {
                parameter: {
                    f: hash.f,
                    id: 4_834_290_508_791_808,
                    registrationToken: token.raw_value,
                    requestId: hash.request_id,
                    timestamp: hash.timestamp.toString(),
                },
            };
        }
        request(response) {
            return plainToInstance(Response, response, { excludeExtraneousValues: false });
        }
    }
    GameWebToken.Request = Request;
    class Result {
        access_token;
        expires_in;
    }
    __decorate([
        Transform(({ value }) => new JWT(value)),
        __metadata("design:type", JWT)
    ], Result.prototype, "access_token", void 0);
    class Response {
        correlation_id;
        status;
        result;
        get access_token() {
            return this.result.access_token;
        }
        get nsa_id() {
            return this.access_token.payload.links.networkServiceAccount.id;
        }
    }
    __decorate([
        Type(() => Result),
        __metadata("design:type", Result)
    ], Response.prototype, "result", void 0);
    GameWebToken.Response = Response;
})(GameWebToken || (GameWebToken = {}));
//# sourceMappingURL=game_web_token.js.map