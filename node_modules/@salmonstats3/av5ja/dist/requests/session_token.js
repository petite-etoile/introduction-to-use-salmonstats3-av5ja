var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Expose, Transform, plainToInstance } from 'class-transformer';
import { JWT } from '../dto/jwt.dto';
import { Method } from '../enum/method';
export var SessionToken;
(function (SessionToken) {
    class Request {
        baseURL = 'https://accounts.nintendo.com/';
        headers = {
            'Accept-Encoding': 'gzip',
            'Accept-Language': 'en-US',
            Connection: 'Keep-Alive',
            'Content-Type': 'application/json',
            Host: 'accounts.nintendo.com',
        };
        method = Method.POST;
        parameters;
        path = 'connect/1.0.0/api/session_token';
        constructor(code, verifier) {
            this.parameters = {
                client_id: '71b963c1b7b6d119',
                session_token_code: code,
                session_token_code_verifier: verifier,
            };
        }
        request(response) {
            return plainToInstance(Response, response, { excludeExtraneousValues: true });
        }
    }
    SessionToken.Request = Request;
    class Response {
        code;
        session_token;
    }
    __decorate([
        Expose(),
        __metadata("design:type", String)
    ], Response.prototype, "code", void 0);
    __decorate([
        Expose(),
        Transform(({ value }) => new JWT(value)),
        __metadata("design:type", JWT)
    ], Response.prototype, "session_token", void 0);
    SessionToken.Response = Response;
})(SessionToken || (SessionToken = {}));
//# sourceMappingURL=session_token.js.map