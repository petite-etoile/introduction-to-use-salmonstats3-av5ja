import { JWT, Membership, Token } from '../dto/jwt.dto';
import { Method } from '../enum/method';
import { ResponseType, RequestType, Headers, Parameters } from '../utils/request';
import { CoralToken } from './coral_token';
import 'reflect-metadata';
import { UserMe } from './user_me';
export declare namespace GameServiceToken {
    export class Request implements RequestType {
        readonly baseURL: string;
        readonly headers: Headers;
        readonly method: Method;
        readonly parameters: Parameters;
        readonly path: string;
        constructor(token: JWT<Token.Token>, hash: CoralToken.Response, version: string, user: UserMe.Response);
        request(response: any): GameServiceToken.Response;
    }
    class NintendoAccount {
        readonly membership: Membership;
    }
    class FriendCode {
        readonly regenerable: boolean;
        readonly regenerable_at: number;
        readonly id: string;
    }
    class Links {
        readonly nintendo_account: NintendoAccount;
        readonly friend_code: FriendCode;
    }
    export class User {
        /**
         * Coral User ID
         */
        readonly id: number;
        /**
         * Network Service Account ID(NSA ID)
         */
        readonly nsa_id: string;
        readonly image_uri: URL;
        readonly name: string;
        readonly support_id: string;
        readonly is_child_restricted: boolean;
        readonly etag: string;
        readonly links: Links;
    }
    class Credential {
        readonly access_token: JWT<Token.GameServiceToken>;
        readonly expires_in: number;
    }
    class Result {
        readonly user: User;
        readonly web_api_server_credential: Credential;
    }
    export class Response implements ResponseType {
        readonly status: number;
        readonly result: Result;
        get access_token(): JWT<Token.GameServiceToken>;
        /**
         * Coral User ID
         */
        get coral_user_id(): number;
        /**
         * Network Service Account ID(NSA ID)
         */
        get nsa_id(): string;
        /**
         * Coral User ID
         */
        get id(): number;
        get user(): User;
    }
    export {};
}
