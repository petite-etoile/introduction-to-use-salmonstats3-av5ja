var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Expose, Transform, plainToInstance } from 'class-transformer';
import { JWT } from '../dto/jwt.dto';
import { Method } from '../enum/method';
export var AccessToken;
(function (AccessToken) {
    class Request {
        baseURL = 'https://accounts.nintendo.com/';
        headers = {
            Accept: 'application/json',
            'Accept-Encoding': 'gzip',
            'Content-Type': 'application/json',
            Host: 'accounts.nintendo.com',
        };
        method = Method.POST;
        parameters;
        path = 'connect/1.0.0/api/token';
        constructor(session_token) {
            this.parameters = {
                client_id: '71b963c1b7b6d119',
                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer-session-token',
                session_token: session_token.raw_value,
            };
        }
        request(response) {
            return plainToInstance(Response, response, { excludeExtraneousValues: true });
        }
    }
    AccessToken.Request = Request;
    class Response {
        access_token;
        expires_in;
        id_token;
        scope;
        token_type;
        /**
         * NA ID
         */
        get na_id() {
            return this.access_token.payload.sub;
        }
    }
    __decorate([
        Expose(),
        Transform(({ value }) => new JWT(value)),
        __metadata("design:type", JWT)
    ], Response.prototype, "access_token", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], Response.prototype, "expires_in", void 0);
    __decorate([
        Expose(),
        Transform(({ value }) => new JWT(value)),
        __metadata("design:type", JWT)
    ], Response.prototype, "id_token", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Array)
    ], Response.prototype, "scope", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", String)
    ], Response.prototype, "token_type", void 0);
    AccessToken.Response = Response;
})(AccessToken || (AccessToken = {}));
//# sourceMappingURL=access_token.js.map