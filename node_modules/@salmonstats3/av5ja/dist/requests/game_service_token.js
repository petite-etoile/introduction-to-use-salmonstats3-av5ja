var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Expose, Transform, Type, plainToInstance } from 'class-transformer';
import { JWT, Membership } from '../dto/jwt.dto';
import { Method } from '../enum/method';
import 'reflect-metadata';
export var GameServiceToken;
(function (GameServiceToken) {
    class Request {
        baseURL = 'https://api-lp1.znc.srv.nintendo.net/';
        headers;
        method = Method.POST;
        parameters;
        path = 'v3/Account/Login';
        constructor(token, hash, version, user) {
            this.headers = {
                'Accept-Encoding': 'gzip',
                'Content-Type': 'application/json; charset=utf-8',
                'User-Agent': `com.nintendo.znca/${version}(Android/7.1.2)`,
                'X-Platform': 'Android',
                'X-ProductVersion': version,
            };
            this.parameters = {
                parameter: {
                    f: hash.f,
                    language: user.language,
                    naBirthday: user.birthday,
                    naCountry: user.country,
                    naIdToken: token.raw_value,
                    requestId: hash.request_id,
                    timestamp: hash.timestamp.toString(),
                },
            };
        }
        request(response) {
            return plainToInstance(Response, response, { excludeExtraneousValues: false });
        }
    }
    GameServiceToken.Request = Request;
    class NintendoAccount {
        membership;
    }
    __decorate([
        Expose(),
        Type(() => Membership),
        __metadata("design:type", Membership)
    ], NintendoAccount.prototype, "membership", void 0);
    class FriendCode {
        regenerable;
        regenerable_at;
        id;
    }
    __decorate([
        Expose(),
        __metadata("design:type", Boolean)
    ], FriendCode.prototype, "regenerable", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], FriendCode.prototype, "regenerable_at", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", String)
    ], FriendCode.prototype, "id", void 0);
    class Links {
        nintendo_account;
        friend_code;
    }
    __decorate([
        Expose(),
        Type(() => NintendoAccount),
        __metadata("design:type", NintendoAccount)
    ], Links.prototype, "nintendo_account", void 0);
    __decorate([
        Expose(),
        Type(() => FriendCode),
        __metadata("design:type", FriendCode)
    ], Links.prototype, "friend_code", void 0);
    class User {
        /**
         * Coral User ID
         */
        id;
        /**
         * Network Service Account ID(NSA ID)
         */
        nsa_id;
        image_uri;
        name;
        support_id;
        is_child_restricted;
        etag;
        links;
    }
    __decorate([
        Expose(),
        __metadata("design:type", Number)
    ], User.prototype, "id", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", String)
    ], User.prototype, "nsa_id", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", URL)
    ], User.prototype, "image_uri", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", String)
    ], User.prototype, "name", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Boolean)
    ], User.prototype, "is_child_restricted", void 0);
    GameServiceToken.User = User;
    class Credential {
        access_token;
        expires_in;
    }
    __decorate([
        Transform(({ value }) => new JWT(value)),
        __metadata("design:type", JWT)
    ], Credential.prototype, "access_token", void 0);
    class Result {
        user;
        web_api_server_credential;
    }
    __decorate([
        Expose(),
        Type(() => User),
        __metadata("design:type", User)
    ], Result.prototype, "user", void 0);
    __decorate([
        Expose(),
        Type(() => Credential),
        __metadata("design:type", Credential)
    ], Result.prototype, "web_api_server_credential", void 0);
    class Response {
        status;
        result;
        get access_token() {
            return this.result.web_api_server_credential.access_token;
        }
        /**
         * Coral User ID
         */
        get coral_user_id() {
            return this.access_token.payload.sub;
        }
        /**
         * Network Service Account ID(NSA ID)
         */
        get nsa_id() {
            return this.result.user.nsa_id;
        }
        /**
         * Coral User ID
         */
        get id() {
            return this.result.user.id;
        }
        get user() {
            return this.result.user;
        }
    }
    __decorate([
        Expose(),
        Type(() => Result),
        __metadata("design:type", Result)
    ], Response.prototype, "result", void 0);
    GameServiceToken.Response = Response;
})(GameServiceToken || (GameServiceToken = {}));
//# sourceMappingURL=game_service_token.js.map