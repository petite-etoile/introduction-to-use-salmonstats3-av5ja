var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Expose, Transform, Type, plainToInstance } from 'class-transformer';
import dayjs from 'dayjs';
import snakecaseKeys from 'snakecase-keys';
import { ModeType } from '../../enum/mode';
import { RuleType } from '../../enum/rule';
import { SHA256Hash } from '../../enum/sha256hash';
import { Common } from '../../utils/common';
import 'reflect-metadata';
export var CoopHistoryQuery;
(function (CoopHistoryQuery) {
    class Request {
        hash = SHA256Hash.CoopHistoryQuery;
        parameters;
        request(response) {
            return plainToInstance(Response, { ...snakecaseKeys(response), ...{ raw_value: response } }, { excludeExtraneousValues: true });
        }
    }
    CoopHistoryQuery.Request = Request;
    class HistoryDetail {
        id;
    }
    __decorate([
        Expose(),
        Transform(({ value }) => new Common.CoopHistoryDetailId(value)),
        __metadata("design:type", Common.CoopHistoryDetailId)
    ], HistoryDetail.prototype, "id", void 0);
    class HistoryGroupNode {
        nodes;
    }
    __decorate([
        Expose(),
        Type(() => HistoryGroup),
        __metadata("design:type", Array)
    ], HistoryGroupNode.prototype, "nodes", void 0);
    class HistoryDetailNode {
        nodes;
    }
    __decorate([
        Expose(),
        Type(() => HistoryDetail),
        __metadata("design:type", Array)
    ], HistoryDetailNode.prototype, "nodes", void 0);
    class HistoryGroup {
        start_time;
        end_time;
        mode;
        rule;
        history_details;
        get result_id_list() {
            return this.history_details.nodes.map((node) => node.id);
        }
    }
    __decorate([
        Expose(),
        Transform(({ value }) => (value === null ? null : dayjs(value).toDate())),
        __metadata("design:type", Object)
    ], HistoryGroup.prototype, "start_time", void 0);
    __decorate([
        Expose(),
        Transform(({ value }) => (value === null ? null : dayjs(value).toDate())),
        __metadata("design:type", Object)
    ], HistoryGroup.prototype, "end_time", void 0);
    __decorate([
        Expose(),
        Transform(({ value }) => Object.values(ModeType).find((mode) => mode === value) || ModeType.UNDEFINED),
        __metadata("design:type", String)
    ], HistoryGroup.prototype, "mode", void 0);
    __decorate([
        Expose(),
        Transform(({ value }) => Object.values(RuleType).find((rule) => rule === value) || RuleType.UNDEFINED),
        __metadata("design:type", String)
    ], HistoryGroup.prototype, "rule", void 0);
    __decorate([
        Expose(),
        Type(() => HistoryDetailNode),
        __metadata("design:type", HistoryDetailNode)
    ], HistoryGroup.prototype, "history_details", void 0);
    CoopHistoryQuery.HistoryGroup = HistoryGroup;
    class CoopResult {
        history_groups;
    }
    __decorate([
        Expose(),
        Type(() => HistoryGroupNode),
        __metadata("design:type", HistoryGroupNode)
    ], CoopResult.prototype, "history_groups", void 0);
    class DataClass {
        coop_result;
    }
    __decorate([
        Expose(),
        Type(() => CoopResult),
        __metadata("design:type", CoopResult)
    ], DataClass.prototype, "coop_result", void 0);
    class Response {
        data;
        get history_groups() {
            return this.data.coop_result.history_groups.nodes;
        }
        /**
         * リザルトIDをプレイ時間で昇順にソート
         */
        get coop_result_detail_ids() {
            return this.history_groups
                .flatMap((v) => v.history_details.nodes.map((v) => v.id))
                .sort((a, b) => dayjs(a.play_time).unix() - dayjs(b.play_time).unix());
        }
        raw_value;
        json() {
            return this.raw_value;
        }
    }
    __decorate([
        Expose(),
        Type(() => DataClass),
        __metadata("design:type", DataClass)
    ], Response.prototype, "data", void 0);
    __decorate([
        Expose(),
        __metadata("design:type", Object)
    ], Response.prototype, "raw_value", void 0);
    CoopHistoryQuery.Response = Response;
})(CoopHistoryQuery || (CoopHistoryQuery = {}));
//# sourceMappingURL=coop_history_query.js.map