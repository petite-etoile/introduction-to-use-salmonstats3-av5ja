import { AlgorithmType } from '../enum/algorithm';
import { TokenType } from '../enum/token_type';
declare class Header {
    readonly alg: AlgorithmType;
}
interface PayloadType {
    readonly aud: string;
    readonly exp: number;
    readonly iat: number;
    get is_valid(): boolean;
    readonly typ: TokenType;
}
export declare namespace Token {
    class SessionToken implements PayloadType {
        readonly aud: string;
        readonly exp: number;
        readonly typ: TokenType;
        readonly iat: number;
        get is_valid(): boolean;
    }
    class Token implements PayloadType {
        readonly aud: string;
        readonly exp: number;
        readonly typ: TokenType;
        readonly iat: number;
        /**
         * NA ID
         */
        readonly sub: string;
        get is_valid(): boolean;
    }
    class GameServiceToken implements PayloadType {
        readonly aud: string;
        readonly exp: number;
        readonly typ: TokenType;
        readonly iat: number;
        readonly membership: Membership;
        readonly isChildRestricted: boolean;
        /**
         * Coral User ID
         */
        readonly sub: number;
        get is_valid(): boolean;
    }
    class GameWebToken implements PayloadType {
        readonly aud: string;
        readonly exp: number;
        readonly typ: TokenType;
        readonly iat: number;
        readonly links: Links;
        get is_valid(): boolean;
    }
}
interface NetworkServiceAccount {
    /**
     * Network Service Account ID(NSA ID)
     */
    readonly id: string;
}
interface Links {
    readonly networkServiceAccount: NetworkServiceAccount;
}
export declare class Membership {
    readonly active: boolean;
}
export declare class JWT<T extends PayloadType> {
    header: Header;
    payload: T;
    signature: string;
    get is_valid(): boolean;
    get raw_value(): string;
    constructor(raw_value: string);
}
export {};
