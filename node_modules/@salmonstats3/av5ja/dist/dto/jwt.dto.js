var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import base64url from 'base64url';
import { Expose } from 'class-transformer';
import dayjs from 'dayjs';
class Header {
    alg;
}
export var Token;
(function (Token_1) {
    class SessionToken {
        aud;
        exp;
        typ;
        iat;
        get is_valid() {
            return true;
        }
    }
    Token_1.SessionToken = SessionToken;
    class Token {
        aud;
        exp;
        typ;
        iat;
        /**
         * NA ID
         */
        sub;
        get is_valid() {
            return true;
        }
    }
    Token_1.Token = Token;
    class GameServiceToken {
        aud;
        exp;
        typ;
        iat;
        membership;
        isChildRestricted;
        /**
         * Coral User ID
         */
        sub;
        get is_valid() {
            return true;
        }
    }
    Token_1.GameServiceToken = GameServiceToken;
    class GameWebToken {
        aud;
        exp;
        typ;
        iat;
        links;
        get is_valid() {
            return true;
        }
    }
    Token_1.GameWebToken = GameWebToken;
})(Token || (Token = {}));
export class Membership {
    active;
}
__decorate([
    Expose(),
    __metadata("design:type", Boolean)
], Membership.prototype, "active", void 0);
export class JWT {
    header;
    payload;
    signature;
    get is_valid() {
        return dayjs(this.payload.exp).isBefore(dayjs());
    }
    get raw_value() {
        return [[this.header, this.payload].map((value) => base64url.fromBase64(btoa(JSON.stringify(value)))), this.signature].flat().join('.');
    }
    constructor(raw_value) {
        const [header, payload, signature] = raw_value.split('.');
        this.header = JSON.parse(atob(header));
        this.payload = JSON.parse(atob(payload));
        this.signature = signature;
    }
}
//# sourceMappingURL=jwt.dto.js.map